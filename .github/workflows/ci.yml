name: 🚀 CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  PHP_VERSION: '8.2'
  NODE_VERSION: '18'

jobs:
  # Backend Tests
  backend-tests:
    name: 🧪 Backend Tests
    runs-on: ubuntu-latest
    
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: password
          MYSQL_DATABASE: erp_modular_test
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3
      
      redis:
        image: redis:7.2
        ports:
          - 6379:6379
        options: --health-cmd="redis-cli ping" --health-interval=10s --health-timeout=5s --health-retries=3

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🔧 Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: ${{ env.PHP_VERSION }}
        extensions: mbstring, dom, fileinfo, mysql, redis
        coverage: xdebug

    - name: 📦 Cache Composer dependencies
      uses: actions/cache@v3
      with:
        path: ~/.composer/cache
        key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
        restore-keys: |
          ${{ runner.os }}-composer-

    - name: 📥 Install Composer dependencies
      run: composer install --no-progress --prefer-dist --optimize-autoloader

    - name: 🔧 Copy environment file
      run: cp .env.example .env

    - name: 🔑 Generate application key
      run: php artisan key:generate

    - name: 🗄️ Run database migrations
      run: php artisan migrate --force
      env:
        DB_CONNECTION: mysql
        DB_HOST: 127.0.0.1
        DB_PORT: 3306
        DB_DATABASE: erp_modular_test
        DB_USERNAME: root
        DB_PASSWORD: password

    - name: 🌱 Seed database
      run: php artisan db:seed --force

    - name: 🧪 Run PHPUnit tests
      run: php artisan test --coverage
      env:
        DB_CONNECTION: mysql
        DB_HOST: 127.0.0.1
        DB_PORT: 3306
        DB_DATABASE: erp_modular_test
        DB_USERNAME: root
        DB_PASSWORD: password

    - name: 📊 Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: backend
        name: backend-coverage

  # Frontend Tests
  frontend-tests:
    name: 🎨 Frontend Tests
    runs-on: ubuntu-latest

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🔧 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: 📥 Install npm dependencies
      run: npm ci

    - name: 🔍 Run ESLint
      run: npm run lint

    - name: 🧪 Run Jest tests
      run: npm run test:unit

    - name: 🏗️ Build application
      run: npm run build

    - name: 📦 Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: frontend-build
        path: public/dist/

  # Code Quality
  code-quality:
    name: 🔍 Code Quality
    runs-on: ubuntu-latest

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: 🔧 Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: ${{ env.PHP_VERSION }}
        extensions: mbstring, dom, fileinfo

    - name: 📦 Install Composer dependencies
      run: composer install --no-progress --prefer-dist

    - name: 🔍 Run PHPStan
      run: ./vendor/bin/phpstan analyse

    - name: 🔍 Run PHP CS Fixer
      run: ./vendor/bin/php-cs-fixer fix --dry-run --diff

    - name: 🔧 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: 📥 Install npm dependencies
      run: npm ci

    - name: 🔍 Run TypeScript check
      run: npm run type-check

  # Security Scan
  security-scan:
    name: 🔒 Security Scan
    runs-on: ubuntu-latest

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🔧 Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: ${{ env.PHP_VERSION }}

    - name: 📦 Install Composer dependencies
      run: composer install --no-progress --prefer-dist

    - name: 🔒 Run Security Checker
      run: ./vendor/bin/security-checker security:check

    - name: 🔧 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: 📥 Install npm dependencies
      run: npm ci

    - name: 🔒 Run npm audit
      run: npm audit --audit-level=moderate

  # Docker Build Test
  docker-test:
    name: 🐳 Docker Build Test
    runs-on: ubuntu-latest

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🐳 Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: 🏗️ Build Docker image
      run: docker build -t erp-modular:test .

    - name: 🧪 Test Docker image
      run: |
        docker run --rm erp-modular:test php artisan --version
        docker run --rm erp-modular:test composer --version

  # Deployment (only on main branch)
  deploy:
    name: 🚀 Deploy to Production
    needs: [backend-tests, frontend-tests, code-quality, security-scan, docker-test]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🚀 Deploy to server
      run: |
        echo "🚀 Deploying to production..."
        # Add your deployment script here
        # Example: rsync, scp, or cloud deployment commands
